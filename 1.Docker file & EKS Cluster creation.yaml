
# Below steps are used to dockerise the nodejs application
# we are copying package.json & server.js to run our node js

FROM node:14  #Base Image

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 8080  # Exposing node js on 8080 as per the server.js file

CMD ["node", "server.js"] # Running the server.js file to make our application up and running 



## Building the docker image and push it to docker hub ##

docker build bala12345/nodeapp:v1


######## EKS CLUSTER CREATION and command installation steps ON AWS using MAC as base machine ##############

Step-00:

1.Install AWS CLI
2.Install kubectl CLI
3.Install eksctl CLI


Step-01-01: MAC - Install and configure AWS CLI

** Download the binary and install via command line using below two commands **

# Download Binary
curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"

# Install the binary
sudo installer -pkg ./AWSCLIV2.pkg -target /


** Verify the installation **

```
aws --version
aws-cli/2.0.7 Python/3.7.4 Darwin/19.4.0 botocore/2.0.0dev11

which aws
```


**** Step-01-02: Configure AWS Command Line using Security Credentials *****

Go to AWS Management Console --> Services --> IAM
Select the IAM User: kalyan
Important Note: Use only IAM user to generate Security Credentials. Never ever use Root User. (Highly not recommended)
Click on Security credentials tab
Click on Create access key
Copy Access ID and Secret access key
Go to command line and provide the required details


aws configure
AWS Access Key ID [None]: XXXXXXXXX  (Replace your creds when prompted)
AWS Secret Access Key [None]: XXXXXXX  (Replace your creds when prompted)
Default region name [None]: us-east-1
Default output format [None]: json


**** Step-02-01: MAC - Install and configure kubectl ****

# Download the Package
mkdir kubectlbinary
cd kubectlbinary
curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18/2020-04-16/bin/darwin/amd64/kubectl

# Provide execute permissions
chmod +x ./kubectl

# Set the Path by copying to user Home Directory
mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
echo 'export PATH=$PATH:$HOME/bin' >> ~/.bash_profile

# Verify the kubectl version
kubectl version --short --client
Output: Client Version: v1.18-eks-e16311


**** Step-03-01: eksctl on Mac ****

# Install Homebrew on MacOs
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

# Install the Weaveworks Homebrew tap.
brew tap weaveworks/tap

# Install the Weaveworks Homebrew tap.
brew install weaveworks/tap/eksctl

# Verify eksctl version
eksctl version




                                      ******* Create EKS Cluster & Node Groups *******
                                        
                                        

Step-01: Create EKS Cluster using eksctl without node group

It will take 15 to 20 minutes to create the Cluster Control Plane


# Create Cluster
eksctl create cluster --name=eksdemo1 \
                      --region=us-east-1 \
                      --zones=us-east-1a,us-east-1b \
                      --without-nodegroup 

# Get List of clusters
eksctl get cluster


Step-02: Create & Associate IAM OIDC Provider for our EKS Cluster 

eksctl utils associate-iam-oidc-provider \
    --region us-east-1 \
    --cluster eksdemo1 \
    --approve
    
    
Step-03: Create EC2 Keypair

Create a new EC2 Keypair with name as kube-demo
This keypair we will use it when creating the EKS NodeGroup.
This will help us to login to the EKS Worker Nodes using Terminal.



Step-04: Create Node Group with additional Add-Ons in Public Subnets

# Create Public Node Group   
eksctl create nodegroup --cluster=eksdemo1 \
                       --region=us-east-1 \
                       --name=eksdemo1-ng-public1 \
                       --node-type=t3.medium \
                       --nodes=2 \
                       --nodes-min=2 \
                       --nodes-max=4 \
                       --node-volume-size=20 \
                       --ssh-access \
                       --ssh-public-key=kube-demo \
                       --managed \
                       --asg-access \
                       --external-dns-access \
                       --full-ecr-access \
                       --appmesh-access \
                       --alb-ingress-access 
                       
                       
                       
                       
List Worker Nodes


# List EKS clusters
eksctl get cluster

# List NodeGroups in a cluster
eksctl get nodegroup --cluster=<clusterName>

# List Nodes in current kubernetes cluster
kubectl get nodes -o wide

# Our kubectl context should be automatically changed to new cluster
kubectl config view --minify

Finally installed Kubernetes cluster on EKS Successfully 

































